权限概述
===

许可批准
---
应用必须通过 <uses-permission>在应用清单中包含标记 来宣传其所需的权限 。

请求提示危险权限
---
- 运行时请求（Android 6.0及更高版本）
如果设备运行的是Android 6.0（API级别23）或更高版本， 并且应用程序的数量targetSdkVersion 为23或更高，则在安装时不会通知用户任何应用程序权限。
您的应用必须要求用户在运行时授予危险权限。当您的应用请求权限时，用户会看到一个系统对话框（如图1左侧所示），告诉用户您的应用尝试访问哪个权限组。该对话框包括拒绝和允许按钮。

即使用户授予您的应用程序所请求的权限，您也不能总是依赖它。用户还可以选择在系统设置中逐个启用和禁用权限。您应该始终在运行时检查并请求权限以防止运行时错误（SecurityException）。

- 安装时请求（Android 5.1.1及更低版本）
如果设备运行Android 5.1.1（API级别22）或更低版本，或者targetSdkVersion 在任何版本的Android上运行时 应用程序为22或更低，系统会自动要求用户在安装时为您的应用授予所有危险权限

许可执行
---


保护水平
---
有三种保护级别会影响第三方应用程序： 正常，签名和危险权限。

- 正常权限

如果应用程序在其清单中声明它需要正常权限，则系统会在安装时自动授予应用程序该权限。系统不会提示用户授予正常权限，用户也无法撤消这些权限。
从Android 9（API级别28）开始，以下权限分类为 PROTECTION_NORMAL：

ACCESS_LOCATION_EXTRA_COMMANDS
ACCESS_NETWORK_STATE
ACCESS_NOTIFICATION_POLICY
ACCESS_WIFI_STATE
BLUETOOTH
BLUETOOTH_ADMIN
BROADCAST_STICKY
CHANGE_NETWORK_STATE
CHANGE_WIFI_MULTICAST_STATE
CHANGE_WIFI_STATE
DISABLE_KEYGUARD
EXPAND_STATUS_BAR
FOREGROUND_SERVICE
GET_PACKAGE_SIZE
INSTALL_SHORTCUT
INTERNET
KILL_BACKGROUND_PROCESSES
MANAGE_OWN_CALLS
MODIFY_AUDIO_SETTINGS
NFC
READ_SYNC_SETTINGS
READ_SYNC_STATS
RECEIVE_BOOT_COMPLETED
REORDER_TASKS
REQUEST_COMPANION_RUN_IN_BACKGROUND
REQUEST_COMPANION_USE_DATA_IN_BACKGROUND
REQUEST_DELETE_PACKAGES
REQUEST_IGNORE_BATTERY_OPTIMIZATIONS
SET_ALARM
SET_WALLPAPER
SET_WALLPAPER_HINTS
TRANSMIT_IR
USE_FINGERPRINT
VIBRATE
WAKE_LOCK
WRITE_SYNC_SETTINGS


- 签名权限
系统会在安装时授予这些应用程序权限，但仅限于尝试使用权限的应用程序使用与定义权限的应用程序相同的证书进行签名时。

从Android 8.1（API级别27）开始，第三方应用程序可以使用的以下权限分类为 PROTECTION_SIGNATURE：

BIND_ACCESSIBILITY_SERVICE
BIND_AUTOFILL_SERVICE
BIND_CARRIER_SERVICES
BIND_CHOOSER_TARGET_SERVICE
BIND_CONDITION_PROVIDER_SERVICE
BIND_DEVICE_ADMIN
BIND_DREAM_SERVICE
BIND_INCALL_SERVICE
BIND_INPUT_METHOD
BIND_MIDI_DEVICE_SERVICE
BIND_NFC_SERVICE
BIND_NOTIFICATION_LISTENER_SERVICE
BIND_PRINT_SERVICE
BIND_SCREENING_SERVICE
BIND_TELECOM_CONNECTION_SERVICE
BIND_TEXT_SERVICE
BIND_TV_INPUT
BIND_VISUAL_VOICEMAIL_SERVICE
BIND_VOICE_INTERACTION
BIND_VPN_SERVICE
BIND_VR_LISTENER_SERVICE
BIND_WALLPAPER
CLEAR_APP_CACHE
MANAGE_DOCUMENTS
READ_VOICEMAIL
REQUEST_INSTALL_PACKAGES
SYSTEM_ALERT_WINDOW
WRITE_SETTINGS
WRITE_VOICEMAIL

- 危险的权限
危险权限涵盖应用程序需要涉及用户私人信息的数据或资源的区域，或者可能会影响用户存储的数据或其他应用程序的操作。


权限概述
许可 的目的是保护Android用户的隐私。Android应用必须请求访问敏感用户数据（如联系人和短信）的权限，以及某些系统功能（如相机和互联网）。根据功能的不同，系统可能会自动授予权限，也可能会提示用户批准请求。

Android安全体系结构的核心设计点是，默认情况下，任何应用程序都无权执行任何会对其他应用程序，操作系统或用户产生负面影响的操作。这包括读取或写入用户的私人数据（如联系人或电子邮件），读取或写入其他应用程序的文件，执行网络访问，保持设备唤醒等等。

此页面概述了Android权限的工作方式，包括：如何向用户呈现权限，安装时和运行时权限请求之间的区别，权限的实施方式以及权限及其组的类型。如果您只想获得使用应用权限的操作指南，请参阅 请求应用权限。

许可批准
应用必须通过 <uses-permission>在应用清单中包含标记 来宣传其所需的权限 。例如，需要发送SMS消息的应用程序将在清单中包含以下行：

<manifest xmlns：android = “http://schemas.android.com/apk/res/android” package = “com.example.snazzyapp” > <uses-permission android：name = “android.permission.SEND_SMS” /> <application ... >         ... </ application> </ manifest> 
          

     

    

    
如果您的应用在其清单中列出了正常权限（即，不会对用户的隐私或设备操作造成太大风险的权限），系统会自动将这些权限授予您的应用。

如果您的应用在其清单中列出了危险权限（即可能影响用户隐私或设备正常运行的SEND_SMS权限），例如上述 权限，则用户必须明确同意授予这些权限。

有关正常和危险权限的详细信息，请参阅保护级别。

请求提示危险权限
只有危险权限才需要用户同意。Android要求用户授予危险权限的方式取决于用户设备上运行的Android版本以及应用程序定位的系统版本。

运行时请求（Android 6.0及更高版本）
如果设备运行的是Android 6.0（API级别23）或更高版本， 并且应用程序的数量targetSdkVersion 为23或更高，则在安装时不会通知用户任何应用程序权限。您的应用必须要求用户在运行时授予危险权限。当您的应用请求权限时，用户会看到一个系统对话框（如图1左侧所示），告诉用户您的应用尝试访问哪个权限组。该对话框包括拒绝和允许按钮。

如果用户拒绝权限请求，则下次应用请求权限时，该对话框包含一个复选框，选中该复选框后，表示不希望再次提示用户获得权限（参见图1，右）。



图1.初始权限对话框（左）和次要权限请求以及关闭进一步请求的选项（右）

如果用户选中“ 永不再询问”框并点击 “拒绝”，则系统不再提示用户以后是否尝试请求相同的权限。

即使用户授予您的应用程序所请求的权限，您也不能总是依赖它。用户还可以选择在系统设置中逐个启用和禁用权限。您应该始终在运行时检查并请求权限以防止运行时错误（SecurityException）。

有关如何处理运行时权限请求的详细信息，请参阅 请求应用程序权限。

安装时请求（Android 5.1.1及更低版本）
如果设备运行Android 5.1.1（API级别22）或更低版本，或者targetSdkVersion 在任何版本的Android上运行时 应用程序为22或更低，系统会自动要求用户在安装时为您的应用授予所有危险权限（见图2）。



图2.安装时权限对话框

如果用户单击“ 接受”，则授予应用程序请求的所有权限。如果用户拒绝权限请求，系统将取消应用程序的安装。

如果应用更新包含对其他权限的需求，则会在更新应用之前提示用户接受这些新权限。

有关用于请求权限的建议用户体验模式的概述，请参阅应用程序权限最佳实践。

要了解如何检查和请求用户的权限，请参阅 请求应用程序权限。

可选硬件功能的权限
访问某些硬件功能（如蓝牙或相机）需要应用程序权限。但是，并非所有Android设备都具有这些硬件功能。因此，如果您的应用请求 CAMERA权限，那么您还必须<uses-feature>在清单中包含 标记，以声明是否确实需要此功能。例如：

<uses-feature android:name="android.hardware.camera" android:required="false" />
如果您声明android:required="false"该功能，则Google Play允许您的应用安装在没有此功能的设备上。然后，您必须通过调用检查当前设备是否在运行时具有该功能 PackageManager.hasSystemFeature()，并在该功能不可用时正常禁用该功能。

如果您未提供 <uses-feature>代码，那么当Google Play看到您的应用请求相应的权限时，它会认为您的应用需要此功能。因此，它会从没有该功能的设备中过滤您的应用，就像您android:required="true"在 <uses-feature>标记中声明一样 。

有关详细信息，请参阅 Google Play和基于功能的过滤

许可执行
权限不仅适用于请求系统功能。应用程序提供的服务可以强制执行自定义权限，以限制谁可以使用它们。有关声明自定义权限的详细信息，请参阅定义自定义应用程序权限。

活动权限执行
使用android:permission属性对清单中的标记应用的权限限制了谁可以启动它。在和 期间检查权限 。如果呼叫者没有所需的权限，则会 从呼叫中抛出。 <activity>ActivityContext.startActivity()Activity.startActivityForResult()SecurityException

服务权限执行
使用android:permission属性对清单中的标记应用的权限限制谁可以启动或绑定到关联的。在期间检查权限 ， 和 。如果呼叫者没有所需的权限，则会从呼叫中抛出。 <service>ServiceContext.startService()Context.stopService()Context.bindService()SecurityException

广播许可执行
使用该android:permission属性对标记应用的权限限制了谁可以向关联的广播发送广播。返回后检查权限，因为系统尝试将提交的广播传递给给定的接收者。因此，权限失败不会导致异常被抛回调用者; 它只是不提供。 <receiver>BroadcastReceiver Context.sendBroadcast()Intent

以相同的方式，可以提供许可Context.registerReceiver()以控制谁可以向编程注册的接收器广播。另一方面，当呼叫Context.sendBroadcast()限制允许哪些广播接收机接收广播时，可以提供许可。

请注意，接收方和广播公司都需要许可。发生这种情况时，必须通过两个权限检查才能将意图传递给关联目标。有关更多信息，请参阅 限制具有权限的广播。

Content Provider权限实施
使用该android:permission属性对标记应用的权限限制了谁可以访问数据 。（内容提供商有一个重要的额外安全设施，称为 URI权限，下面将对此进行描述。）与其他组件不同，您可以设置两个单独的权限属性： 限制谁可以从提供程序读取，并 限制谁可以写入它。请注意，如果提供程序受读取和写入权限保护，则仅保留写入权限并不意味着您可以从提供程序读取。 <provider>ContentProvider android:readPermission android:writePermission

首次检索提供程序时，将检查权限（如果您没有权限，SecurityException 则抛出a），并且在提供程序上执行操作时。使用 ContentResolver.query()需要持有读取权限; 使用 ContentResolver.insert()， ContentResolver.update()， ContentResolver.delete() 需要写权限。在所有这些情况下，未持有所需的权限会导致SecurityException从通话中抛出。

URI权限
当与内容提供商一起使用时，到目前为止描述的标准许可系统通常是不够的。内容提供商可能希望使用读取和写入权限来保护自己，而其直接客户端还需要将特定URI交给其他应用程序以供其操作。

一个典型的例子是电子邮件应用程序中的附件。对电子邮件的访问应受权限保护，因为这是敏感的用户数据。但是，如果图像附件的URI被提供给图像查看器，则该图像查看器不再具有打开附件的权限，因为它没有理由拥有访问所有电子邮件的权限。

此问题的解决方案是per-URI权限：启动活动或将结果返回给活动时，调用者可以设置 Intent.FLAG_GRANT_READ_URI_PERMISSION和/或 Intent.FLAG_GRANT_WRITE_URI_PERMISSION。这授予接收活动权限访问意图中的特定数据URI，而不管它是否具有访问对应于意图的内容提供者中的数据的任何许可。

此机制允许一种通用的功能样式模型，其中用户交互（例如打开附件或从列表中选择联系人）驱动临时授予细粒度权限。这可以是将应用程序所需的权限仅限于与其行为直接相关的权限的关键工具。

要构建最安全的实现，使其他应用程序对您在yor应用程序中的操作负责，您应该以这种方式使用细粒度权限，并使用属性或 标记声明您的应用程序对它的支持 。 android:grantUriPermissions<grant-uri-permissions>

更多信息可在发现 Context.grantUriPermission()， Context.revokeUriPermission()和 Context.checkUriPermission()方法。

其他许可执行
任何对服务的调用都可以强制执行任意细粒度的权限。这是通过该Context.checkCallingPermission()方法实现的。使用所需的权限字符串进行调用，并返回一个整数，指示是否已将该权限授予当前调用进程。请注意，这只能在您执行来自其他进程的调用时使用，通常是通过从服务发布的IDL接口或以其他方式执行到另一个进程。

还有许多其他有用的方法可以检查权限。如果您具有另一个进程的进程ID（PID），则可以使用该Context.checkPermission()方法检查针对该PID的权限。如果您拥有其他应用程序的程序包名称，则可以使用该PackageManager.checkPermission()方法查明该特定程序包是否已被授予特定权限。

自动权限调整
随着时间的推移，可能会向平台添加新的限制，以便为了使用某些API，您的应用必须请求以前不需要的权限。由于现有应用程序假定可以免费访问这些API，因此Android可以将新的权限请求应用于应用程序的清单，以避免破坏新平台版本上的应用程序（从而“为您的应用程序”授予“权限”）。Android根据为该 targetSdkVersion属性提供的值，决定应用是否可能需要该权限。如果该值低于添加权限的版本，则Android会添加权限。

例如，READ_EXTERNAL_STORAGE 从API级别19开始强制执行权限，以限制对共享存储空间的访问。如果您的 targetSdkVersion年龄为18或更低，则此权限会在较新版本的Android上添加到您的应用中。

警告：如果您的应用自动添加了权限，则Google Play上的应用列表会列出这些附加权限，即使您的应用可能实际上并不需要这些权限。要避免这种情况并删除您不需要的默认权限，请始终将您的权限更新 targetSdkVersion为尽可能高。您可以在Build.VERSION_CODES文档中查看每个版本添加了哪些权限。

保护水平
权限分为几个保护级别。保护级别会影响是否需要运行时权限请求。

有三种保护级别会影响第三方应用程序： 正常，签名和危险权限。

正常权限
普通权限涵盖了应用程序需要访问应用程序沙箱外部数据或资源的区域，但用户隐私或其他应用程序操作的风险非常小。例如，设置时区的权限是正常权限。

如果应用程序在其清单中声明它需要正常权限，则系统会在安装时自动授予应用程序该权限。系统不会提示用户授予正常权限，用户也无法撤消这些权限。

从Android 9（API级别28）开始，以下权限分类为 PROTECTION_NORMAL：

ACCESS_LOCATION_EXTRA_COMMANDS
ACCESS_NETWORK_STATE
ACCESS_NOTIFICATION_POLICY
ACCESS_WIFI_STATE
BLUETOOTH
BLUETOOTH_ADMIN
BROADCAST_STICKY
CHANGE_NETWORK_STATE
CHANGE_WIFI_MULTICAST_STATE
CHANGE_WIFI_STATE
DISABLE_KEYGUARD
EXPAND_STATUS_BAR
FOREGROUND_SERVICE
GET_PACKAGE_SIZE
INSTALL_SHORTCUT
INTERNET
KILL_BACKGROUND_PROCESSES
MANAGE_OWN_CALLS
MODIFY_AUDIO_SETTINGS
NFC
READ_SYNC_SETTINGS
READ_SYNC_STATS
RECEIVE_BOOT_COMPLETED
REORDER_TASKS
REQUEST_COMPANION_RUN_IN_BACKGROUND
REQUEST_COMPANION_USE_DATA_IN_BACKGROUND
REQUEST_DELETE_PACKAGES
REQUEST_IGNORE_BATTERY_OPTIMIZATIONS
SET_ALARM
SET_WALLPAPER
SET_WALLPAPER_HINTS
TRANSMIT_IR
USE_FINGERPRINT
VIBRATE
WAKE_LOCK
WRITE_SYNC_SETTINGS
签名权限
系统会在安装时授予这些应用程序权限，但仅限于尝试使用权限的应用程序使用与定义权限的应用程序相同的证书进行签名时。

注意：某些签名权限不适用于第三方应用程序。
从Android 8.1（API级别27）开始，第三方应用程序可以使用的以下权限分类为 PROTECTION_SIGNATURE：

BIND_ACCESSIBILITY_SERVICE
BIND_AUTOFILL_SERVICE
BIND_CARRIER_SERVICES
BIND_CHOOSER_TARGET_SERVICE
BIND_CONDITION_PROVIDER_SERVICE
BIND_DEVICE_ADMIN
BIND_DREAM_SERVICE
BIND_INCALL_SERVICE
BIND_INPUT_METHOD
BIND_MIDI_DEVICE_SERVICE
BIND_NFC_SERVICE
BIND_NOTIFICATION_LISTENER_SERVICE
BIND_PRINT_SERVICE
BIND_SCREENING_SERVICE
BIND_TELECOM_CONNECTION_SERVICE
BIND_TEXT_SERVICE
BIND_TV_INPUT
BIND_VISUAL_VOICEMAIL_SERVICE
BIND_VOICE_INTERACTION
BIND_VPN_SERVICE
BIND_VR_LISTENER_SERVICE
BIND_WALLPAPER
CLEAR_APP_CACHE
MANAGE_DOCUMENTS
READ_VOICEMAIL
REQUEST_INSTALL_PACKAGES
SYSTEM_ALERT_WINDOW
WRITE_SETTINGS
WRITE_VOICEMAIL
危险的权限
危险权限涵盖应用程序需要涉及用户私人信息的数据或资源的区域，或者可能会影响用户存储的数据或其他应用程序的操作。例如，读取用户联系人的权限是一种危险的权限。如果应用声明它需要危险权限，则用户必须明确授予该应用的权限。在用户批准该权限之前，您的应用无法提供依赖该权限的功能。

要使用危险权限，您的应用必须提示用户在运行时授予权限。有关如何提示用户的更多详细信息，请参阅 危险权限的请求提示。

有关危险权限的列表，请参阅下面的表1。

特殊权限
有一些权限不像正常和危险的权限。SYSTEM_ALERT_WINDOW并且WRITE_SETTINGS特别敏感，因此大多数应用程序不应使用它们。如果应用程序需要其中一个权限，则必须在清单中声明权限，并发送请求用户授权的意图。系统通过向用户显示详细的管理屏幕来响应意图。

有关如何请求这些权限的详细信息，请参阅参考SYSTEM_ALERT_WINDOW和 WRITE_SETTINGS参考条目。

可以在以下位置找到Android系统提供的所有权限 Manifest.permission。

许可组
权限分组为与设备功能或功能相关的组。在此系统下，权限请求在组级别处理，单个权限组对应于应用程序清单中的多个权限声明。例如，SMS组包括声明READ_SMS和 RECEIVE_SMS声明。以这种方式对权限进行分组使用户能够做出更有意义和更明智的选择，而不会被复杂和技术许可请求所淹没。



所有危险的Android权限都属于权限组。无论保护级别如何，任何权限都可以属于权限组。但是，如果权限是危险的，则权限组仅影响用户体验。

如果设备运行的是Android 6.0（API级别23）且应用程序targetSdkVersion为23或更高，则当您的应用请求危险权限时，以下系统行为适用：

如果应用程序当前在权限组中没有任何权限，系统会向用户显示描述应用程序要访问的权限组的权限请求对话框。该对话框未描述该组中的特定权限。例如，如果某个应用请求了该 READ_CONTACTS权限，系统对话框就会说该应用需要访问该设备的联系人。如果用户授予批准，系统将为应用程序提供其请求的权限。
如果应用程序已在同一权限组中被授予其他危险权限，则系统会立即授予权限，而不与用户进行任何交互。例如，如果某个应用程序先前已请求并已获得该READ_CONTACTS权限，然后它会请求WRITE_CONTACTS，则系统会立即授予该权限，而不向用户显示权限对话框。
警告：未来版本的Android SDK可能会将特定权限从一个组移动到另一个组。因此，请勿将应用程序的逻辑基于这些权限组的结构。

例如，与Android 8.1（API级别27）READ_CONTACTS属于同一权限组 WRITE_CONTACTS。如果您的应用请求READ_CONTACTS 权限，然后请求 WRITE_CONTACTS权限，请不要假设系统可以自动授予 WRITE_CONTACTS权限。

如果设备运行Android 5.1（API级别22）或更低版本，或者应用程序 targetSdkVersion为22或更低，系统会要求用户在安装时授予权限。系统再次告诉用户应用程序需要哪些权限组，而不是单个权限。例如，当应用程序请求READ_CONTACTS安装对话框时，列出“联系人”组。用户接受时，仅READ_CONTACTS授予应用程序权限。

注意：即使用户已在同一组中授予了其他权限，您的应用仍需要明确请求其所需的每个权限。此外，将权限分组到组中可能会在将来的Android版本中发生变化。您的代码不应具有依赖于同一组中的一组特定权限的逻辑。

表1.危险权限和权限组。

许可组	权限
CALENDAR	
READ_CALENDAR
WRITE_CALENDAR
CALL_LOG	
READ_CALL_LOG
WRITE_CALL_LOG
PROCESS_OUTGOING_CALLS
CAMERA	
CAMERA
CONTACTS	
READ_CONTACTS
WRITE_CONTACTS
GET_ACCOUNTS
LOCATION	
ACCESS_FINE_LOCATION
ACCESS_COARSE_LOCATION
MICROPHONE	
RECORD_AUDIO
PHONE	
READ_PHONE_STATE
READ_PHONE_NUMBERS
CALL_PHONE
ANSWER_PHONE_CALLS
ADD_VOICEMAIL
USE_SIP
SENSORS	
BODY_SENSORS
SMS	
SEND_SMS
RECEIVE_SMS
READ_SMS
RECEIVE_WAP_PUSH
RECEIVE_MMS
STORAGE	
READ_EXTERNAL_STORAGE
WRITE_EXTERNAL_STORAGE


- 特殊权限
有一些权限不像正常和危险的权限。SYSTEM_ALERT_WINDOW并且WRITE_SETTINGS特别敏感，因此大多数应用程序不应使用它们。
如果应用程序需要其中一个权限，则必须在清单中声明权限，并发送请求用户授权的意图。系统通过向用户显示详细的管理屏幕来响应意图。


许可组
---


权限分组为与设备功能或功能相关的组。在此系统下，权限请求在组级别处理，单个权限组对应于应用程序清单中的多个权限声明。
例如，SMS组包括声明READ_SMS和 RECEIVE_SMS声明。以这种方式对权限进行分组使用户能够做出更有意义和更明智的选择，而不会被复杂和技术许可请求所淹没。

查看应用的权限
---

其他资源
---




